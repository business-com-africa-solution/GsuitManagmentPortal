
#Gmail API Configuration

gmail.client.clientId=807072385809-5c00iu5f3peu334hs4t7gjbarfm4truo.apps.googleusercontent.com
gmail.client.clientSecret=JjGHlbVcZOCru0lq-zm6nT2s
gmail.client.accessTokenUri=https://accounts.google.com/o/oauth2/token
gmail.client.userAuthorizationUri=https://accounts.google.com/o/oauth2/auth
gmail.client.clientAuthenticationScheme=query
gmail.client.scope=profile email
gmail.resource.userInfoUri=https://www.googleapis.com/gmail/v1/users/me/profile
gmail.resource.preferTokenInfo=true
gmail.client.redirectUri=http://localhost:8080/login/BussnesComAfrica
#gmail.client.redirectUri=http://businesscomtest.ddns.net/login/BussnesComAfrica
#server.address=192.168.86.238
server.tomcat.accesslog.enabled=true

## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)

=
#spring.datasource.url=jdbc:postgresql://appmaker-208404:us-central1:edwin/gsuitmangmentsytem



#spring.datasource.url=jdbc:postgresql://127.0.0.1:5432/gsuitmangmentsytem
#spring.datasource.username= postgres
#spring.datasource.password= postgres

spring.cloud.gcp.project-id=my-project-95-234306
spring.cloud.gcp.sql.instance-connection-name=my-project-95-234306:us-central1:gsuitmanagment
spring.cloud.gcp.sql.database-name=gsuitmangmentsytem
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.cloud.gcp.credentials.location=file:/secrets/cloudsql/credentials.json
spring.cloud.gcp.credentials.scopes=https://www.googleapis.com/auth/pubsub,https://www.googleapis.com/auth/sqlservice.admin


#spring.cloud.gcp.sql.database-name=gsuitmangmentsytem

# This value is formatted in the form: [gcp-project-id]:[region]:[instance-name]
#spring.cloud.gcp.sql.instance-connection-name=appmaker-208404:us-central1:edwin

# ===============================
# = JPA / HIBERNATE
# ===============================
 #Show or not log for each sql query
spring.jpa.show-sql=true

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

spring.queries.users-query=select email,image_url from user_app where email=?
spring.queries.roles-query=select u.email,ur.name from user_app u, role ur where u.role=ur.role_id and u.email=?

# Naming strategy
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect